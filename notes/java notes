java is platform independent and jvm (java virtual machine is platform dependent)
a = 10 a is ref var in stack and 10 is object in heap
java runs on jvm we only need jre and jvm to run java on other system

*********** String[] args means all the values you are passing in cli along with runtime
java demo "" "" ""
# JDK = Java development kit
============================
it includes jre,javac,archiever - jar, docs gen -javadocs , interpreter

# JRE = java runtime environment
================================
 
# JVM = java virtual machine
# JDK has jre and jvm
# JVM ha libraries and jvm

`*******` Our code is converted to byte code (filename.class) and this code is run by

Integer vs int => Integer is a wrapper class and int is primitive data type

| Data Type | Size    | Default Value | Description                          | Example             |
| --------- | ------- | ------------- | ------------------------------------ | ------------------- |
| `byte`    | 1 byte  | `0`           | Small integers (-128 to 127)         | `byte a = 100;`     |
| `short`   | 2 bytes | `0`           | Larger than byte (-32,768 to 32,767) | `short b = 10000;`  |
| `int`     | 4 bytes | `0`           | Default integer type                 | `int c = 50000;`    |
| `long`    | 8 bytes | `0L`          | Very large integers                  | `long d = 100000L;` |
| `float`   | 4 bytes | `0.0f`        | Decimal numbers with less precision  | `float e = 5.5f;`   |
| `double`  | 8 bytes | `0.0d`        | Decimal numbers with high precision  | `double f = 10.5;`  |
| `char`    | 2 bytes | `'\u0000'`    | Single 16-bit Unicode character      | `char g = 'A';`     |
| `boolean` | \~1 bit | `false`       | True or false                        | `boolean h = true;` |

binary format => 0b101 means 5
also 10_00_000 is valid just not to get confused

we can convert byte to int implicitly but not int to byte we have to write
byte a = (int) 500; here 500 % 256 will happen because 500 % length_of_range_of_byte is there

# Type Conversion (Automatic / Implicit)

Allowed conversions include:
byte → short → int → long → float → double

# Type Casting (Manual / Explicit)




we have two types of memeory => heap and stack

`*******` `every method has a stack and every variable in a method is called local var and stored in a stack and all the variable present inside the class and outside the method are called instance var they are stored in a heap and object are just ref variable, ref var are present in stack and object is created in heap`

| Feature         | Local Variable                                 | Instance Variable                       |
| --------------- | ---------------------------------------------- | --------------------------------------- |
| Declared in     | Inside a method/constructor/block              | Inside a class, outside methods         |
| Scope           | Only within that method/block                  | Entire class via object reference       |
| Lifetime        | Created when method is called; destroyed after | Lives as long as the object lives       |
| Stored in       | Stack                                          | Heap (part of object)                   |
| Access modifier | Cannot have (private, public, etc.)            | Can have access modifiers               |
| Default value   | No default value; must be initialized          | Has default (null, 0, false) if not set |



`*******` in jvm we have heap memeory, inside it we have string constant pool 
IT WILL FIND IF STRING VALUE IS PRESENT IF YES THEN THEN ASSIGN THE ADDRESS AND ARE IMMUTABLE 
everytime new string is created when append
i.e why string builder was there
i.e String s1 = "J" and String s2 = "j" and s1 == s2

# string str = new String("HELLO");
# string str1 = "HELLO";

here str is stored in heap memory and str1 is stored in string constant pool
so str != str1


`Increasing capacity rule for SB => new capacity = (old capacity * 2) + 2`
`******************************` 


# STATIC
# ======

`static keyword means variables belongs to class rather than object and for each object value  is same`
`using static { name = "value"} we can initialised value for var  `

first class is loaded then objects are instantiated  
to directly load class we can use Class.forName("class_name")

to have utility methods we use static with them not do again create objects
to have classes having relation wiht outer classes we use static and for normal reason also

to create non static sub class
==============================
# A obj = new A(); 
# A.C obj1 = obj.new C()

to create static sub class
==============================
******** A.C obj2 = new A.C()

in java if child class constructor is called then super class is already present and called parent class default constructor

`********`   if we want to call paramterised constructor of parent we have to pass values in super keyword

## the super keyoword is present already in it and is hidden 
# every super class in java extends Object class by default

`********` join method will make sure till the thread is not stopped it wont execute
# this() it will call the constructor of the same class

********
========
class Child extends  Parent{
    Child(){
        this(1);
        System.out.println("This is child"); 
    }

    Child(int a){
        this(1,2);
        System.out.println("This is child 1 paramter"); 
    }

    Child(int a,int b){
        System.out.println("This is child 2 parameter"); 
    }
}




# object that does not have any name are called anonymous object
like => new Class()

******** =>  typically used for one-time use where you don't need to reuse the object later.  

by default java.lang is there imported so sout is working





# MODIFIERS
******** ==

`those who will give error`
`src/`
`├── pkg1/`
`│   ├── Base.java => `
`│   ├── SubSamePackage.java => pvt`
`│   └── NonSubSamePackage.java => pvt`
`├── pkg2/`
`│   ├── SubDifferentPackage.java => pvt,def`
`│   └── NonSubDifferentPackage.java => pvt,def,prot`


# Polymorphism 
==============  

compile time => overloading
runtime => overriding

# final

`in var => const var`
`in class => to stop inheritance`
`in method => if you dont want to override any method`


# int a = 10;     Integer b = a;// Auto-boxing (int → Integer)      int c = b; / Unboxing (Integer → int)


********** `we cannot create object of abstract class`

we defined abstract methods and initialised them in sub classes and abstract class can have both abstract and nonabstract methods but abstract method should have abstract class

# for extending either we need all function from abstract class or just abstract keyword in sub class generally non abstract class are called concrete class

*** `we cannot create oject of abstract class it is called by obj  of non abstract sub class` 


# Inner class
=============

Bilkul! Interview ke liye main aapko **short, crisp aur impactful points** deta hoon, jo aap confidently explain kar sako — saath hi ek simple example bhi.

---

# Interview style: **Inner Classes Use Cases + Examples**

---

### 1. Member Inner Class

**Use Case:**
Jab inner class ka kaam outer class ke context mein ho, aur wo outer class ke private members access kar sake.
**Example:**
`Car` ke andar `Engine` jo sirf `Car` ke liye valid ho.

```java
class Car {
    private String brand = "BMW";

    class Engine {
        void start() {
            System.out.println(brand + " engine started");
        }
    }
}

Car car = new Car();
Car.Engine engine = car.new Engine();
engine.start();
```

---

### 2. Static Nested Class

**Use Case:**
Jab inner class independent ho aur outer class ke bina kaam kare, jaise utility classes ya builder pattern.
**Example:**
Builder class for creating objects.

```java
class Person {
    private String name;

    private Person(Builder builder) {
        this.name = builder.name;
    }

    static class Builder {
        private String name;
        Builder setName(String name) {
            this.name = name;
            return this;
        }
        Person build() {
            return new Person(this);
        }
    }
}

Person p = new Person.Builder().setName("Amit").build();
```

---

### 3. Local Inner Class

**Use Case:**
Jab temporary class sirf ek method mein chahiye for helper logic.
**Example:**

```java
void printValid(String[] arr) {
    class Validator {
        boolean isValid(String s) {
            return s != null && !s.isEmpty();
        }
    }
    Validator v = new Validator();
    for(String s : arr) {
        if (v.isValid(s)) System.out.println(s);
    }
}
```

---

### 4. Anonymous Inner Class

**Use Case:**
Ek baar ka interface implementation, mostly event handling mein.
**Example:**

```java
button.addActionListener(new ActionListener() {
    public void actionPerformed(ActionEvent e) {
        System.out.println("Button clicked");
    }
});
```

---

## Quick Interview Tips:

* **Difference:** Member inner class needs outer object, static nested class does not.
* **Access:** Member inner class can access outer class members directly; static nested class only static members.
* **Scope:** Local inner class limited to method/block; anonymous class has no name and used inline.
* **Use cases:** Think GUI components, utility helpers, builders, event listeners.

---

Agar chaho toh main ek **short MCQ quiz** ya **flashcards** bhi bana sakta ho for interview practice!










Bilkul! Java code kaise execute hota hai, uska poora process step-by-step samjhte hain—with each component ka role bhi:

### ☕ Java Code Execution Process (Ek ek kadam mein)

1. **Source Code Likha jata hai (.java file):**  
   Aap Java mein code likhte ho kisi text editor ya IDE (like IntelliJ, Eclipse) mein. Ye file `.java` extension ke saath hoti hai.  
   **Component involved:** Programmer

2. **Compilation (Java Compiler - `javac`):**  
   `javac` compiler aapke `.java` code ko bytecode mein convert karta hai. Output hoti hai `.class` file.  
   **Component:** Java Compiler  
   **Role:** Human-readable code ko bytecode (platform-independent) mein badlna.

3. **Class Loader:**  
   JVM ka Class Loader `.class` file ko load karta hai memory mein. Ye different classes ko JVM environment mein laata hai.  
   **Component:** Class Loader  
   **Role:** Classes ko dynamically load karna at runtime.

4. **Bytecode Verifier:**  
   Ye ensure karta hai ki bytecode safe hai, koi illegal code toh nahi (jaise unauthorized memory access).  
   **Component:** Bytecode Verifier  
   **Role:** Security aur integrity verify karna.

5. **JVM (Java Virtual Machine) Execution:**  
   Ab JVM, interpreter ya JIT (Just-In-Time) compiler ke through bytecode ko machine code mein convert karta hai jo aapke OS aur hardware ko samajh aaye.  
   **Component:** JVM  
   **Role:** Final execution karna hardware pe.

6. **Runtime Environment (JRE):**  
   JVM ke saath-saath ye libraries aur files provide karta hai jo code run karne ke liye zaroori hote hain.  
   **Component:** Java Runtime Environment  
   **Role:** JVM ko support karna with required resources.

-




1. `Interpreter`
    Interpreter ek-ek line of bytecode ko uthata hai aur turant uska equivalent machine code execute karta hai.
    - Fayda: Immediate execution, useful for debugging.
    - Limitation: Thoda slow hota hai since har baar naye instructions interpret hote hain.

2. `JIT Compiler (Just-In-Time Compiler)`
    JIT ek performance booster hai. Yeh frequently used code blocks (called hotspots) ko pehchanta hai aur unhe machine code mein convert karke memory mein store kar leta hai. Toh agle bar jab wohi code  chalega, JVM usse direct machine code se run karega—no need to interpret again.
    - Fayda: Fast execution after initial compilation.
    - Component: Part of JVM’s optimization engine.
    
3. `Garbage Collection`
    JVM execution ka ek important feature hai memory management. JVM automatically unused objects ko memory se hata deta hai, is process ko Garbage Collection kehte hain.




# A class can extend another class, and similarly, an interface can extend another interface. However, only a class can implement an interface, and the reverse (an interface implementing a class) is not allowed.



